{"task": "Implement a function named `xor8` which takes two 8-bit words and returns their bitwise XOR. Also provide a constant `zero8` equal to 0 (8-bit).", "type": "function", "task_id": 1, "test_setup_code": "", "test_list": ["assert cry.eval_f('xor8 0x00 0xFF').result() == BV(8,0xff)"], "challenge_test_list": []}
{"task": "Implement a function named `matrix` which takes no input and returns a 3 x 3 matrix of tuples. For the function use a nested comprehension to write an expression to produce a 3 Ã— 3 matrix (as a sequence of sequences), such that the ijth entry contains the value (i, j).", "type": "function", "task_id": 2, "test_setup_code": "", "test_list": ["assert cry.eval_f('matrix').result() == [[(0, 0), (0, 1), (0, 2)], [(1, 0), (1, 1), (1, 2)], [(2, 0), (2, 1), (2, 2)]]"], "challenge_test_list": []}
{"task": "Implement a function named `encrypt` that performs encryption on ASCII strings and a function named `decrypt` that performs decryption on ASCII strings. Each character must be shifted by the given key modulo 256.", "type": "function", "task_id": 3, "test_setup_code": "", "test_list": ["assert cry.eval_f('encrypt 3 \"hello\"').result() == 'khoor'"], "challenge_test_list": []}
{"task": "Using ONLY the names and types provided, write a monomorphic Cryptol property that proves decrypt inverts encrypt for a 512-byte plaintext.", "type": "property", "task_id": 4, "test_setup_code": "encryptChar : [8] -> [8] -> [8]\nencryptChar key c = (c + key)\ndecryptChar : [8] -> [8] -> [8]\ndecryptChar key c = (c - key)\nencrypt : {n} [8] -> [n][8] -> [n][8]\nencrypt key txt = [ encryptChar key c | c <- txt ]\ndecrypt : {n} [8] -> [n][8] -> [n][8]\ndecrypt key txt = [ decryptChar key c | c <- txt ]", "test_list": ["assert cry.prove('equivalent')"], "challenge_test_list": []}